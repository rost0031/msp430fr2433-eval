<?xml version="1.0" encoding="UTF-8"?>
<model version="5.0.2" links="1">
 <documentation>Dining Philosopher Problem example

NOTE: Requries QP5.</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Events}-->
 <package name="Events" stereotype="0x01">
  <!--${Events::QpcMainEvt}-->
  <class name="QpcMainEvt" superclass="qpc::QEvt"/>
 </package>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::QpcMain}-->
  <class name="QpcMain" superclass="qpc::QActive">
   <documentation>/**
 * @brief	Main &quot;class&quot;
 */</documentation>
   <!--${AOs::QpcMain::timerMain}-->
   <attribute name="timerMain" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Main timer. */</documentation>
   </attribute>
   <!--${AOs::QpcMain::addr}-->
   <attribute name="addr" type="uint16_t" visibility="0x01" properties="0x00"/>
   <!--${AOs::QpcMain::byte}-->
   <attribute name="byte" type="uint8_t" visibility="0x01" properties="0x00"/>
   <!--${AOs::QpcMain::SM}-->
   <statechart properties="0x01">
    <!--${AOs::QpcMain::SM::initial}-->
    <initial target="../1/1">
     <action>(void)e; /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_qpcMain);
QS_FUN_DICTIONARY(&amp;QHsm_top);

QS_SIG_DICTIONARY(TERMINATE_SIG, (void *)0);
QS_SIG_DICTIONARY(TIMER_SIG, (void *)0);

QActive_subscribe(&amp;me-&gt;super, NTAG_REG_READ_DONE_SIG);
QActive_subscribe(&amp;me-&gt;super, NTAG_REG_WRITE_DONE_SIG);
QActive_subscribe(&amp;me-&gt;super, NTAG_MEM_READ_DONE_SIG);
QActive_subscribe(&amp;me-&gt;super, NTAG_MEM_WRITE_DONE_SIG);</action>
     <initial_glyph conn="3,3,5,0,6,7">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::QpcMain::SM::active}-->
    <state name="active">
     <documentation>/**
 * @brief    Top-level state where everything happens
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <!--${AOs::QpcMain::SM::active::TERMINATE}-->
     <tran trig="TERMINATE">
      <action>BSP_terminate(0);</action>
      <tran_glyph conn="2,56,3,-1,14">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::QpcMain::SM::active::FirstSubState}-->
     <state name="FirstSubState">
      <documentation>/**
 * @brief    First substate for demo purpose
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>QTimeEvt_rearm( &amp;me-&gt;timerMain, MSEC_TO_TICKS( 1000 ) );
</entry>
      <!--${AOs::QpcMain::SM::active::FirstSubState::TIMER}-->
      <tran trig="TIMER" target="../../2">
       <action>QTimeEvt_rearm( &amp;me-&gt;timerMain, MSEC_TO_TICKS( 1000 ) );
me-&gt;addr = 6;
//P1OUT ^=  LED1;  /* toggle LED1 */</action>
       <tran_glyph conn="6,16,3,3,29">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,10,23,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <!--${AOs::QpcMain::SM::active::state1}-->
     <state name="state1">
      <entry>NtagReadMemReqQEvt_t *pEvt = Q_NEW(NtagReadMemReqQEvt_t, NTAG_MEM_READ_SIG);
pEvt-&gt;nBytes = 4;
pEvt-&gt;addr = me-&gt;addr;
QACTIVE_POST(AO_Ntag, (QEvt *)pEvt, me);</entry>
      <!--${AOs::QpcMain::SM::active::state1::NTAG_MEM_READ_DONE}-->
      <tran trig="NTAG_MEM_READ_DONE">
       <action>me-&gt;addr++;</action>
       <!--${AOs::QpcMain::SM::active::state1::NTAG_MEM_READ_DO~::[me->addr<12]}-->
       <choice target="../..">
        <guard>me-&gt;addr &lt; 12</guard>
        <choice_glyph conn="39,27,5,2,15,-7">
         <action box="3,-2,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::QpcMain::SM::active::state1::NTAG_MEM_READ_DO~::[else]}-->
       <choice target="../../../3">
        <guard>else</guard>
        <action>me-&gt;byte = 0;
me-&gt;addr = 6;</action>
        <choice_glyph conn="39,27,4,0,6">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="59,16,1,-1,-20,11">
        <action box="-16,-2,22,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="35,10,24,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <!--${AOs::QpcMain::SM::active::state2}-->
     <state name="state2">
      <entry>NtagWriteMemReqQEvt_t *pEvt = Q_NEW(NtagWriteMemReqQEvt_t, NTAG_MEM_WRITE_SIG);
pEvt-&gt;nBytes = 4;
pEvt-&gt;addr = me-&gt;addr;
pEvt-&gt;data[0] = me-&gt;byte++;
pEvt-&gt;data[1] = me-&gt;byte++;
pEvt-&gt;data[2] = me-&gt;byte++;
pEvt-&gt;data[3] = me-&gt;byte++;
QACTIVE_POST(AO_Ntag, (QEvt *)pEvt, me);</entry>
      <!--${AOs::QpcMain::SM::active::state2::NTAG_MEM_WRITE_DONE}-->
      <tran trig="NTAG_MEM_WRITE_DONE">
       <action>me-&gt;addr++;</action>
       <!--${AOs::QpcMain::SM::active::state2::NTAG_MEM_WRITE_D~::[me->addr<12]}-->
       <choice target="../..">
        <guard>me-&gt;addr &lt; 12</guard>
        <choice_glyph conn="39,53,5,0,15,-10">
         <action box="3,-2,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::QpcMain::SM::active::state2::NTAG_MEM_WRITE_D~::[else]}-->
       <choice>
        <guard>else</guard>
        <choice_glyph conn="39,53,4,-1,8">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="59,39,1,-1,-20,14">
        <action box="-16,-2,22,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="35,33,24,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,5,88,62"/>
    </state>
    <state_diagram size="96,104"/>
   </statechart>
  </class>
  <!--${AOs::AO_QpcMain}-->
  <attribute name="AO_QpcMain" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/** &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <!--${AOs::QpcMain_ctor}-->
  <operation name="QpcMain_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief     C &quot;constructor&quot; for this &quot;class&quot;.
 *
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 *
 * @return None
 */</documentation>
   <code>QpcMain *me = &amp;l_qpcMain;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;QpcMain_initial));

QTimeEvt_ctorX(&amp;me-&gt;timerMain, &amp;me-&gt;super, TIMER_SIG, 0);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::main_ao.h}-->
  <file name="main_ao.h">
   <text>/**
 * @file    main_ao.h
 * @brief   Main QPC Active Object
 *
 * Copyright 2020, Harry Rostovtsev.
 * All other rights reserved.
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_AO_H
#define __MAIN_AO_H

/* Includes ------------------------------------------------------------------*/
/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/

$declare(Events::QpcMainEvt)

/* Exported constants --------------------------------------------------------*/
$declare(AOs::AO_QpcMain)

/* Exported functions --------------------------------------------------------*/
$declare(AOs::QpcMain_ctor)


#endif                                                         /* __MAIN_AO_H */
</text>
  </file>
  <!--${.::main_ao.c}-->
  <file name="main_ao.c">
   <text>/**
 * @file    main_ao.c
 * @brief   Main QPC Active Object
 *
 * Copyright 2020, Harry Rostovtsev.
 * All other rights reserved.
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;qpc.h&quot;
#include &quot;main_ao.h&quot;
#include &quot;bsp.h&quot;
#include &quot;signals.h&quot;
#include &quot;ntag.h&quot;
#include &quot;i2c.h&quot;
#include &quot;ntag_ao.h&quot;

/* Compile-time called macros ------------------------------------------------*/
//Q_DEFINE_THIS_FILE

/* Private typedefs ----------------------------------------------------------*/
/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables, objects, and function prototypes -----------------------*/
$declare(AOs::QpcMain)

static QpcMain l_qpcMain;                      /**&lt; single instance of the AO */

QActive * const AO_QpcMain = (QActive *)&amp;l_qpcMain.super; /**&lt; Opaque pointer */

/* Public and Exported functions ---------------------------------------------*/
$define(AOs::QpcMain_ctor)

/* Private functions ---------------------------------------------------------*/
$define(AOs::QpcMain)</text>
  </file>
 </directory>
</model>
