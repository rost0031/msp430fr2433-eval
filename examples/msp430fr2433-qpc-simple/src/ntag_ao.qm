<?xml version="1.0" encoding="UTF-8"?>
<model version="5.0.2" links="1">
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Events}-->
 <package name="Events" stereotype="0x01">
  <!--${Events::NtagReadRegEvt_t}-->
  <class name="NtagReadRegEvt_t" superclass="qpc::QEvt">
   <documentation>/** @brief NTAG event */</documentation>
   <!--${Events::NtagReadRegEvt_t::reg}-->
   <attribute name="reg" type="NTAGRegNumber_t" visibility="0x01" properties="0x00">
    <documentation>/** Which register to read */</documentation>
   </attribute>
   <!--${Events::NtagReadRegEvt_t::value}-->
   <attribute name="value" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/** Value of the register (if used for a response) */</documentation>
   </attribute>
  </class>
 </package>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::NtagAO}-->
  <class name="NtagAO" superclass="qpc::QActive">
   <documentation>/**
 * @brief	NTAG &quot;class&quot;
 */</documentation>
   <!--${AOs::NtagAO::timerMain}-->
   <attribute name="timerMain" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Main timer. */</documentation>
   </attribute>
   <!--${AOs::NtagAO::ntagCmdHsm}-->
   <attribute name="ntagCmdHsm" type="QHsm *" visibility="0x01" properties="0x00">
    <documentation>/** I2C Command HSM pointer */</documentation>
   </attribute>
   <!--${AOs::NtagAO::status}-->
   <attribute name="status" type="Error_t" visibility="0x01" properties="0x00">
    <documentation>/** Keep track of errors */</documentation>
   </attribute>
   <!--${AOs::NtagAO::SM}-->
   <statechart properties="0x03">
    <!--${AOs::NtagAO::SM::initial}-->
    <initial target="../1/3">
     <action>(void)e; /* suppress the compiler warning about unused parameter */

QHSM_INIT(me-&gt;ntagCmdHsm, (QEvt *)0);/*initial tran. for Mine1 */

QS_OBJ_DICTIONARY(&amp;l_ntagAO);
QS_FUN_DICTIONARY(&amp;QHsm_top);

QS_SIG_DICTIONARY(TIMER_SIG, (void *)0);

QS_SIG_DICTIONARY(NTAG_REG_READ_SIG, (void *)0);
QS_SIG_DICTIONARY(NTAG_REG_READ_DONE_SIG, (void *)0);
QS_SIG_DICTIONARY(NTAG_REG_WRITE_SIG, (void *)0);
QS_SIG_DICTIONARY(NTAG_REG_WRITE_DONE_SIG, (void *)0);
QS_SIG_DICTIONARY(NTAG_MEM_READ_SIG, (void *)0);
QS_SIG_DICTIONARY(NTAG_MEM_READ_DONE_SIG, (void *)0);
QS_SIG_DICTIONARY(NTAG_MEM_WRITE_SIG, (void *)0);
QS_SIG_DICTIONARY(NTAG_MEM_WRITE_DONE_SIG, (void *)0);</action>
     <initial_glyph conn="3,3,5,0,52,13">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::NtagAO::SM::busy}-->
    <state name="busy">
     <documentation>/**
 * @brief    Busy state
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>QTimeEvt_rearm( &amp;me-&gt;timerMain, MSEC_TO_TICKS( 10 ) );
//NTAG_init();</entry>
     <!--${AOs::NtagAO::SM::busy::NTAG_REG_READ_DONE}-->
     <tran trig="NTAG_REG_READ_DONE" target="../../2">
      <action>QS_BEGIN(LOG, 0);       /* application-specific record begin */
QS_STR(&quot;Reg Data:&quot;);
QS_U8(1, ((NtagReadRegEvt_t const *) e)-&gt;reg);
QS_U16(1, ((NtagReadRegEvt_t const *) e)-&gt;value );
QS_END();
</action>
      <tran_glyph conn="47,42,3,3,-41">
       <action box="-21,-2,20,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::NtagAO::SM::busy::I2C_TX, I2C_RX}-->
     <tran trig="I2C_TX, I2C_RX">
      <action brief="dispatchToHsm">QHSM_DISPATCH(me-&gt;ntagCmdHsm, e);</action>
      <tran_glyph conn="47,79,3,-1,12">
       <action box="0,-4,11,6"/>
      </tran_glyph>
     </tran>
     <!--${AOs::NtagAO::SM::busy::TIMER}-->
     <tran trig="TIMER" target="../../2">
      <action>me-&gt;status = ERR_HW_TIMEOUT;</action>
      <tran_glyph conn="47,20,3,1,-16">
       <action box="-9,-2,7,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::NtagAO::SM::busy::init}-->
     <state name="init">
      <entry>NtagReadRegEvt_t *pEvt = Q_NEW(NtagReadRegEvt_t, NTAG_REG_READ_SIG);
pEvt-&gt;reg = NTAG_MEM_OFFSET_TAG_STATUS_REG;
pEvt-&gt;value = 0xFFFF;
QHSM_DISPATCH(me-&gt;ntagCmdHsm, (QEvt *)pEvt);</entry>
      <!--${AOs::NtagAO::SM::busy::init::NTAG_REG_READ_DONE}-->
      <tran trig="NTAG_REG_READ_DONE">
       <action>QS_BEGIN(LOG, 0);       /* application-specific record begin */
QS_STR(&quot;Reg Data:&quot;);
QS_U8(1, ((NtagReadRegEvt_t const *) e)-&gt;reg);
QS_U32_HEX(1, ((NtagReadRegEvt_t const *) e)-&gt;value );
QS_END();

</action>
       <!--${AOs::NtagAO::SM::busy::init::NTAG_REG_READ_DO~::[else]}-->
       <choice target="../..">
        <guard>else</guard>
        <choice_glyph conn="55,34,5,1,23,-13,-4">
         <action box="7,-2,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::NtagAO::SM::busy::init::NTAG_REG_READ_DO~::[VCC_OK?]}-->
       <choice target="../../../../2">
        <guard brief="VCC_OK?">((NtagReadRegEvt_t const *) e)-&gt;value &amp; NTAG_REG_STATUS0_VCC_SUPPLY_OK_MASK</guard>
        <choice_glyph conn="55,34,5,1,-24">
         <action box="-8,1,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="55,27,2,-1,7">
        <action box="0,1,21,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="51,16,23,11">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="47,10,68,88">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <!--${AOs::NtagAO::SM::idle}-->
    <state name="idle">
     <documentation>/**
 * @brief    Idle state
 *
 * @param  [in,out] me: Pointer to the state machine
 * @param  [in,out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Handle error if one occurred. */

// TODO: do we want to post an event in case of error? - HR
if (ERR_NONE != me-&gt;status) {
    QS_BEGIN(ERR, 0);       /* application-specific record begin */
    QS_STR(&quot;NTAG error:&quot;);
    QS_U32_HEX(2, me-&gt;status);
    QS_END();

    me-&gt;status = ERR_NONE;
}</entry>
     <!--${AOs::NtagAO::SM::idle::NTAG_REG_READ}-->
     <tran trig="NTAG_REG_READ" target="../../1">
      <action>//NTAG_readReg(NTAG_MEM_OFFSET_TAG_STATUS_REG);
QHSM_DISPATCH(me-&gt;ntagCmdHsm, e);</action>
      <tran_glyph conn="6,38,3,3,41">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,10,25,88">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="157,104"/>
   </statechart>
  </class>
  <!--${AOs::NtagCmdHsm}-->
  <class name="NtagCmdHsm" superclass="qpc::QHsm">
   <documentation>NTAG command orthogonal region. This allows stringing together multiple
I2C commands that are necessary for each NTAG command.</documentation>
   <!--${AOs::NtagCmdHsm::regOffset}-->
   <attribute name="regOffset" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>/** Offset within the register. This is necessary for registers that 
 * are bigger than a single byte */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::regSize}-->
   <attribute name="regSize" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>/** Size of a register */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::pActiveRequest}-->
   <attribute name="pActiveRequest" type="NtagReadRegEvt_t const *" visibility="0x01" properties="0x00">
    <documentation>/** Reference to an event currently being handled. This is necessary so
 * we can avoid copying data to local storage from an event and instead
 * hold on to that event via this reference and manually garbage collect
 * it after we are finished. */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::dataBufTx[6]}-->
   <attribute name="dataBufTx[6]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/** Internal data storage to use with I2C driver */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::dataLenTx}-->
   <attribute name="dataLenTx" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/** Number of bytes in dataBufTx */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::dataBufRx[6]}-->
   <attribute name="dataBufRx[6]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/** Internal data storage to use with I2C driver */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::dataLenRx}-->
   <attribute name="dataLenRx" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/** Number of bytes in dataBufRx */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::status}-->
   <attribute name="status" type="Error_t" visibility="0x01" properties="0x00">
    <documentation>/** Keep track of status and/or errors that can occur */</documentation>
   </attribute>
   <!--${AOs::NtagCmdHsm::SM}-->
   <statechart properties="0x03">
    <!--${AOs::NtagCmdHsm::SM::initial}-->
    <initial target="../1">
     <action>(void)e; /* avoid the &quot;unreferenced parameter&quot; warning */

QS_OBJ_DICTIONARY(&amp;l_ntagCmdHsm);</action>
     <initial_glyph conn="2,2,5,1,31,4,-2">
      <action box="0,-2,11,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::NtagCmdHsm::SM::idle}-->
    <state name="idle">
     <entry>/* Always clear out register data upon entry */
me-&gt;regSize   = 0;
me-&gt;regOffset = 0;

me-&gt;dataLenTx = 0;
me-&gt;dataLenRx = 0;

/* Always NULL out the current request upon entry */
me-&gt;pActiveRequest = (NtagReadRegEvt_t *)0;

/* Handle error if one occurred. */

// TODO: do we want to post an event in case of error? - HR
if (ERR_NONE != me-&gt;status) {
    QS_BEGIN(ERR, 0);       /* application-specific record begin */
    QS_STR(&quot;I2C error:&quot;);
    QS_U32_HEX(1, me-&gt;status);
    QS_END();

    me-&gt;status = ERR_NONE;
}</entry>
     <!--${AOs::NtagCmdHsm::SM::idle::NTAG_REG_READ}-->
     <tran trig="NTAG_REG_READ" target="../../2/0">
      <action>/* Save the current event reference so the event doesn't go away */
Q_NEW_REF(me-&gt;pActiveRequest, NtagReadRegEvt_t);

/* Get register size and clear offset */
me-&gt;regSize = NTAG_getRegSize(me-&gt;pActiveRequest-&gt;reg);
me-&gt;regOffset = 0;</action>
      <tran_glyph conn="2,18,3,3,43">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,4,29,52">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <!--${AOs::NtagCmdHsm::SM::busy}-->
    <state name="busy">
     <exit brief="...">/* Upon exit, ALWAYS delete the active event reference */
Q_DELETE_REF(me-&gt;pActiveRequest);</exit>
     <!--${AOs::NtagCmdHsm::SM::busy::writeAddress}-->
     <state name="writeAddress">
      <entry>#if 0
QpcI2CEvt_t* pEvt = Q_NEW(QpcI2CEvt_t, I2C_TX_SIG);
pEvt-&gt;reg = me-&gt;pActiveRequest-&gt;reg;
NTAG_getRegReadHdr(pEvt-&gt;reg, me-&gt;offset, sizeof(pEvt-&gt;data),
    &amp;(pEvt-&gt;size), pEvt-&gt;data);
QACTIVE_POST(AO_I2C, (QEvt *)pEvt, AO_Ntag);
#endif

/* Fill out me-&gt;dataBuf and me-&gt;dataLen with data needed to write 
 * address of the register to tag */
NTAG_getRegReadHdr(
    me-&gt;pActiveRequest-&gt;reg, 
    me-&gt;regOffset, 
    sizeof(me-&gt;dataBufTx),
    &amp;(me-&gt;dataLenTx), 
    me-&gt;dataBufTx
);

/* Register callback to call when the I2C TX completes */
I2C_regCallback(I2C_txDoneCallback);

/* Initiate a non-blocking I2C TX command */
I2C_exchangeNonBlocking(
    NTAG_I2C_ADDRESS, 
    I2CCmdTx,
    me-&gt;dataLenTx, 
    me-&gt;dataBufTx
);</entry>
      <!--${AOs::NtagCmdHsm::SM::busy::writeAddress::I2C_TX}-->
      <tran trig="I2C_TX" target="../../1">
       <tran_glyph conn="45,22,3,0,7,6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="45,14,22,9">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <!--${AOs::NtagCmdHsm::SM::busy::readByte}-->
     <state name="readByte">
      <entry>
/* Register callback to call when the I2C RX completes */
I2C_regCallback(I2C_rxDoneCallback);

/* Initiate a non-blocking I2C RX command */
I2C_exchangeNonBlocking(
    NTAG_I2C_ADDRESS, 
    I2CCmdRx,
    1, 
    &amp;me-&gt;dataBufRx[0 + me-&gt;regOffset]
);</entry>
      <!--${AOs::NtagCmdHsm::SM::busy::readByte::I2C_RX}-->
      <tran trig="I2C_RX">
       <action>me-&gt;regOffset++;</action>
       <!--${AOs::NtagCmdHsm::SM::busy::readByte::I2C_RX::[More?]}-->
       <choice target="../../../0">
        <guard brief="More?">me-&gt;regOffset &lt; me-&gt;regSize</guard>
        <choice_glyph conn="52,41,5,1,17,-20,-2">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::NtagCmdHsm::SM::busy::readByte::I2C_RX::[else]}-->
       <choice target="../../../../1">
        <guard>else</guard>
        <action>#if 0
/* Use the current active request event to send back data */
me-&gt;pActiveRequest-&gt;value = (uint16_t)me-&gt;dataBufRx[0];
if (me-&gt;regSize == 2) {
    me-&gt;pActiveRequest-&gt;value |= (uint16_t)(me-&gt;dataBufRx[1] &lt;&lt; 8);
}
QACTIVE_POST(AO_Ntag, (QEvt *)(me-&gt;pActiveRequest), AO_Ntag);
#endif

NtagReadRegEvt_t *pEvt = Q_NEW(NtagReadRegEvt_t, NTAG_REG_READ_DONE_SIG);
pEvt-&gt;reg = me-&gt;pActiveRequest-&gt;reg;
pEvt-&gt;value = (uint16_t)me-&gt;dataBufRx[0];
if (me-&gt;regSize == 2) {
    pEvt-&gt;value |= (uint16_t)(me-&gt;dataBufRx[1] &lt;&lt; 8);
}
QACTIVE_POST(AO_Ntag, (QEvt *)pEvt, AO_Ntag);</action>
        <choice_glyph conn="52,41,5,3,-50">
         <action box="-6,-2,5,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="45,34,3,-1,7,7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="45,28,22,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="38,4,58,52">
      <exit box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="117,68"/>
   </statechart>
  </class>
  <!--${AOs::AO_Ntag}-->
  <attribute name="AO_Ntag" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/** &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <!--${AOs::HSM_NtagCmd}-->
  <attribute name="HSM_NtagCmd" type="QHsm * const" visibility="0x00" properties="0x00">
   <documentation>/** &quot;opaque&quot; pointer to the QHsm NTAG Command State machine */</documentation>
  </attribute>
  <!--${AOs::NtagAO_ctor}-->
  <operation name="NtagAO_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief     C &quot;constructor&quot; for this &quot;class&quot;.
 *
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 *
 * @return None
 */</documentation>
   <code>NtagAO *me = &amp;l_ntagAO;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;NtagAO_initial));
me-&gt;ntagCmdHsm = NtagCmdHsm_ctor();
QTimeEvt_ctorX(&amp;me-&gt;timerMain, &amp;me-&gt;super, TIMER_SIG, 0);</code>
  </operation>
  <!--${AOs::NtagCmdHsm_ctor}-->
  <operation name="NtagCmdHsm_ctor" type="QHsm *" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for this HSM &quot;class&quot; that handles NTAG commands
 *
 * @return None
 */</documentation>
   <code>NtagCmdHsm *me;
me = &amp;l_ntagCmdHsm;
/* superclass' ctor */
QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;NtagCmdHsm_initial));
return (QHsm *)me;</code>
  </operation>
  <!--${AOs::I2C_txDoneCallback}-->
  <operation name="I2C_txDoneCallback" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief     Callback for I2C TX being done
 * @return None
 */</documentation>
   <!--${AOs::I2C_txDoneCallba~::pI2CData}-->
   <parameter name="pI2CData" type="const I2CData_t* const"/>
   <code>/* Get access to internal memory of the HSM structure */
NtagCmdHsm *me;
me = &amp;l_ntagCmdHsm;

me-&gt;dataLenTx += pI2CData-&gt;buffer.len;
me-&gt;status = pI2CData-&gt;status;

static const QEvt evt = {I2C_TX_SIG, 0, 0};
QACTIVE_POST(AO_Ntag, &amp;evt, AO_Ntag);</code>
  </operation>
  <!--${AOs::I2C_rxDoneCallback}-->
  <operation name="I2C_rxDoneCallback" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief     Callback for I2C TX being done
 * @return None
 */</documentation>
   <!--${AOs::I2C_rxDoneCallba~::pI2CData}-->
   <parameter name="pI2CData" type="const I2CData_t* const"/>
   <code>/* Get access to internal memory of the HSM structure */
NtagCmdHsm *me;
me = &amp;l_ntagCmdHsm;

me-&gt;dataLenRx += pI2CData-&gt;buffer.len;
me-&gt;status = pI2CData-&gt;status;

static const QEvt evt = {I2C_RX_SIG, 0, 0};
QACTIVE_POST(AO_Ntag, &amp;evt, AO_Ntag);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::ntag_ao.h}-->
  <file name="ntag_ao.h">
   <text>/**
 * @file    ntag_ao.h
 * @brief   NTAG5 QPC Active Object
 *
 * Copyright 2020, Harry Rostovtsev.
 * All other rights reserved.
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __NTAG_AO_H
#define __NTAG_AO_H

/* Includes ------------------------------------------------------------------*/
#include &quot;ntag.h&quot;
/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/

$declare(Events::NtagReadRegEvt_t)

/* Exported constants --------------------------------------------------------*/
$declare(AOs::AO_Ntag)

/* Exported functions --------------------------------------------------------*/
$declare(AOs::NtagAO_ctor)


#endif                                                         /* __NTAG_AO_H */
</text>
  </file>
  <!--${.::ntag_ao.c}-->
  <file name="ntag_ao.c">
   <text>/**
 * @file    main_ao.c
 * @brief   Main QPC Active Object
 *
 * Copyright 2020, Harry Rostovtsev.
 * All other rights reserved.
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;qpc.h&quot;
#include &quot;ntag_ao.h&quot;
#include &quot;ntag_cmd_hsm.h&quot;
#include &quot;bsp.h&quot;
#include &quot;signals.h&quot;
#include &quot;ntag.h&quot;
#include &quot;i2c.h&quot;

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE

/* Private typedefs ----------------------------------------------------------*/
/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables, objects, and function prototypes -----------------------*/
$declare(AOs::NtagAO)

static NtagAO l_ntagAO;                        /**&lt; single instance of the AO */

QActive * const AO_Ntag = (QActive *)&amp;l_ntagAO.super; /**&lt; Opaque pointer */

/* Public and Exported functions ---------------------------------------------*/
$define(AOs::NtagAO_ctor)

/* Private functions ---------------------------------------------------------*/
$define(AOs::NtagAO)</text>
  </file>
  <!--${.::ntag_cmd_hsm.h}-->
  <file name="ntag_cmd_hsm.h">
   <text>/**
 * @file    ntag_cmd_ao.h
 * @brief   NTAG CMD QPC HSM
 *
 * Copyright 2020, Harry Rostovtsev.
 * All other rights reserved.
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __NTAG_CMD_HSM_H
#define __NTAG_CMD_HSM_H

/* Includes ------------------------------------------------------------------*/
#include &quot;ntag.h&quot;
#include &quot;i2c.h&quot;
/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* Exported constants --------------------------------------------------------*/
$declare(AOs::HSM_NtagCmd)

/* Exported functions --------------------------------------------------------*/
$declare(AOs::NtagCmdHsm_ctor)

#endif                                                    /* __NTAG_CMD_HSM_H */
</text>
  </file>
  <!--${.::ntag_cmd_hsm.c}-->
  <file name="ntag_cmd_hsm.c">
   <text>/**
 * @file    ntag_cmd_ao.c
 * @brief   NTAG CMD QPC HSM
 *
 * Copyright 2020, Harry Rostovtsev.
 * All other rights reserved.
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;qpc.h&quot;
#include &quot;ntag_ao.h&quot;
#include &quot;ntag_cmd_hsm.h&quot;
#include &quot;bsp.h&quot;
#include &quot;signals.h&quot;
#include &quot;ntag.h&quot;

/* Compile-time called macros ------------------------------------------------*/
//Q_DEFINE_THIS_FILE

/* Private typedefs ----------------------------------------------------------*/
/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables, objects, and function prototypes -----------------------*/
$declare(AOs::NtagCmdHsm)

static NtagCmdHsm l_ntagCmdHsm;               /**&lt; single instance of the HSM */

QHsm* const HSM_NtagCmd = (QHsm *)&amp;l_ntagCmdHsm.super;     /**&lt; Opaque pointer */

$declare(AOs::I2C_txDoneCallback)
$declare(AOs::I2C_rxDoneCallback)

/* Public and Exported functions ---------------------------------------------*/
$define(AOs::NtagCmdHsm_ctor)
$define(AOs::I2C_txDoneCallback)
$define(AOs::I2C_rxDoneCallback)

/* Private functions ---------------------------------------------------------*/
$define(AOs::NtagCmdHsm)</text>
  </file>
 </directory>
</model>
